(defun parse(L E O)
  (if (evenp(first L))
      (if (> (length(rest L)) 0)
      	(parse (rest L) (append E (list (first L))) O)
      	(list (append E (list (first L))) O))
      (if (> (length(rest L)) 0)
      	(parse (rest L) E (append O (list (first L))))
      	(list E (append O (list (first L))))))
  )

(defun merge1(E O R)
  (if (and (> (length E) 0) (> (length O) 0))
      (progn (setf R (append R (list (first E)) (list (first O)))) (merge1 (rest E) (rest O) R))
      R)
  )

(defun even-odd(L)
  (if (= (length L) 0)
      nil)
  (let ((R (parse L () ())))
  	(merge1 (first R) (second R) () ))
  )

(print (even-odd (list 1 2)))
(print (even-odd (list 1 10 4 13 7)))
(print (even-odd (list 1 3 5 7)))